// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                                Int                                 @id @default(autoincrement())
  sub                               String                              @unique
  username                          String                              @unique
  firstName                         String?
  lastName                          String?
  email                             String                              @unique
  Templates                         Template[]
  ProjectsManaged                   Project[]                           @relation(name: "ProjectsManaged")
  CustomerProjects                  Project[]                           @relation(name: "CustomerProjects")
  ProjectItems                      ProjectItem[]
  ProjectItemCommandsCompleted      ProjectItemCommands[]               @relation(name: "commandCompletedBy")
  ProjectItemCommands               ProjectItemCommands[]               @relation(name: "commandAssignedTo")
  ProjectItemCommandsIssues         ProjectItemCommandsIssues[]
  ProjectItemCommandsComments       ProjectItemCommandsComments[]
  ProjectItemCommandsIssuesComments ProjectItemCommandsIssuesComments[]
  ProjectLifeCycleComments          ProjectLifeCycleComments[]
}

model Template {
  id            Int            @id @default(autoincrement())
  name          String         @unique
  description   String?
  createById    Int
  enabled       Boolean        @default(false)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  createBy      User           @relation(fields: [createById], references: [id])
  TemplateItems TemplateItem[]
}

//commands Json structure should look like this:
//[
//  {
//    "title","Update and Upgrade Linux",
//    "commands": [
//      {
//        "command": "sudo apt-get update -y && sudo apt-get upgrade -y",
//        "expectedResult": "Packages will be updated and upgraded, you will not be prompted for any input, you should not get any errors"
//      },
//      {
//        "command": "sudo reboot now",
//        "expectedResult": "The system will reboot"
//      }
//    ]

model TemplateItem {
  id                   Int                   @id @default(autoincrement())
  templateId           Int
  itemTypeId           Int
  title                String
  description          String?
  index                Int
  hoursRequired        Int
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  template             Template              @relation(fields: [templateId], references: [id])
  itemType             TemplateItemType      @relation(fields: [itemTypeId], references: [id])
  ProjectItem          ProjectItem[]
  TemplateItemCommands TemplateItemCommand[]
}

model TemplateItemCommand {
  id             Int          @id @default(autoincrement())
  templateItemId Int
  description    String?
  command        String
  references     String?
  expectedResult String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  templateItem   TemplateItem @relation(fields: [templateItemId], references: [id])
}

model TemplateItemType {
  id            Int            @id @default(autoincrement())
  name          String         @unique
  description   String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  TemplateItems TemplateItem[]
}

model Project {
  id              Int               @id @default(autoincrement())
  name            String            @unique
  description     String?
  createById      Int
  customerId      Int?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  createBy        User              @relation(name: "ProjectsManaged", fields: [createById], references: [id])
  customer        User?             @relation(name: "CustomerProjects", fields: [customerId], references: [id])
  ProjectItems    ProjectItem[]
  ProjectMetaData ProjectMetaData[]
}

model ProjectMetaData {
  id        Int      @id @default(autoincrement())
  projectId Int
  key       String
  value     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  project   Project  @relation(fields: [projectId], references: [id])
}

model ProjectDefaultMetaData {
  id        Int      @id @default(autoincrement())
  key       String
  value     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProjectLifeCycle {
  id                       Int                        @id @default(autoincrement())
  name                     String                     @unique
  description              String?
  projectId                Int
  index                    Int
  notStartedColor          String                     @default("#FF0000")
  inProgressColor          String                     @default("#FFFF00")
  completedColor           String                     @default("#00FF00")
  startedProgressDate      DateTime?
  completedDate            DateTime? 
  createdAt                DateTime                   @default(now())
  updatedAt                DateTime                   @updatedAt
  ProjectLifeCycleComments ProjectLifeCycleComments[]
}

model DefaultProjectLifeCycle {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  description String?
  index     Int
  notStartedColor          String                     @default("#FF0000")
  inProgressColor          String                     @default("#FFFF00")
  completedColor           String                     @default("#00FF00")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProjectLifeCycleComments {
  id                 Int              @id @default(autoincrement())
  projectLifeCycleId Int
  userId             Int
  comment            String
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  projectLifeCycle   ProjectLifeCycle @relation(fields: [projectLifeCycleId], references: [id])
  user               User             @relation(fields: [userId], references: [id])
}

model ProjectItem {
  id                  Int                   @id @default(autoincrement())
  projectId           Int
  projectItemTypeId   Int?
  fromTemplateItemId  Int?
  title               String
  description         String?
  index               Int
  assignedToId        Int?
  hoursRequired       Int
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  project             Project               @relation(fields: [projectId], references: [id])
  fromTemplateItem    TemplateItem?         @relation(fields: [fromTemplateItemId], references: [id])
  assignedTo          User?                 @relation(fields: [assignedToId], references: [id])
  ProjectItemCommands ProjectItemCommands[]
  ProjectItemType     ProjectItemType?      @relation(fields: [projectItemTypeId], references: [id])
}

model ProjectItemType {
  id           Int           @id @default(autoincrement())
  name         String        @unique
  description  String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  ProjectItems ProjectItem[]
}

model ProjectItemCommands {
  id                          Int                           @id @default(autoincrement())
  projectItemId               Int
  description                 String?
  command                     String
  references                  String?
  expectedResult              String
  completedDate               DateTime?
  completedById               Int?
  assignedToId                Int?
  createdAt                   DateTime                      @default(now())
  updatedAt                   DateTime                      @updatedAt
  projectItem                 ProjectItem                   @relation(fields: [projectItemId], references: [id])
  completedBy                 User?                         @relation(name: "commandCompletedBy", fields: [completedById], references: [id])
  assignedTo                  User?                         @relation(name: "commandAssignedTo", fields: [assignedToId], references: [id])
  ProjectItemCommandsIssues   ProjectItemCommandsIssues[]
  ProjectItemCommandsComments ProjectItemCommandsComments[]
}

model ProjectItemCommandsIssues {
  id                                Int                                 @id @default(autoincrement())
  commandId                         Int
  title                             String
  comment                           String
  userId                            Int
  resolvesIssue                     Boolean                             @default(false)
  createdAt                         DateTime                            @default(now())
  updatedAt                         DateTime                            @updatedAt
  command                           ProjectItemCommands                 @relation(fields: [commandId], references: [id])
  user                              User                                @relation(fields: [userId], references: [id])
  ProjectItemCommandsIssuesComments ProjectItemCommandsIssuesComments[]
}

model ProjectItemCommandsIssuesComments {
  id        Int                       @id @default(autoincrement())
  issueId   Int
  comment   String
  userId    Int
  createdAt DateTime                  @default(now())
  updatedAt DateTime                  @updatedAt
  issue     ProjectItemCommandsIssues @relation(fields: [issueId], references: [id])
  user      User                      @relation(fields: [userId], references: [id])
}

model ProjectItemCommandsComments {
  id        Int                 @id @default(autoincrement())
  commandId Int
  comment   String
  userId    Int
  isPrivate Boolean             @default(false)
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
  command   ProjectItemCommands @relation(fields: [commandId], references: [id])
  user      User                @relation(fields: [userId], references: [id])
}
